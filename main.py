import asyncio
import logging
from aiogram import Bot, Dispatcher, Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import CommandStart, Command
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from datetime import datetime
from states import IncomeStates, ExpenseStates, ReportStates, BusinessStatsStates
from gsheets import get_report_by_range, get_summary_period, get_report_for_date, append_transaction, get_business_stats
from datetime import datetime, timedelta
import sys
import matplotlib.pyplot as plt
import io
import os
import tempfile


API_TOKEN = "7616834856:AAGEBvPoeNZTtNZGeOJDTAumSi9zSlFX794"

# URL Google —Ç–∞–±–ª–∏—Ü—ã
GSHEET_URL = "https://docs.google.com/spreadsheets/d/1XvlXSgs4N0ztCP-aAfu3ZsC4a2p99tCFolXYPOFOvS4/edit?gid=1475886138#gid=1475886138"

logging.basicConfig(level=logging.INFO)
router = Router()

def main_menu():
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ—Ö–æ–¥", callback_data="add_income")],
        [InlineKeyboardButton(text="‚ûñ –†–∞—Å—Ö–æ–¥", callback_data="add_expense")],
        [InlineKeyboardButton(text="üìä –û—Ç—á—ë—Ç", callback_data="report")],
        [InlineKeyboardButton(text="üìã –¢–∞–±–ª–∏—Ü–∞", callback_data="open_gsheet")],
        [InlineKeyboardButton(text="üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∏–∑–Ω–µ—Å–∞", callback_data="business_stats")]
    ])
    return kb

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–∑ –ª—é–±–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
@router.message(CommandStart())
@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    # –û—á–∏—â–∞–µ–º –ª—é–±–æ–µ —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ Google —Ç–∞–±–ª–∏—Ü—É
@router.callback_query(F.data == "open_gsheet")
async def open_google_sheet(callback: CallbackQuery):
    await callback.message.answer(
        f"üìã <b>–°—Å—ã–ª–∫–∞ –Ω–∞ Google —Ç–∞–±–ª–∏—Ü—É:</b>\n\n"
        f"<a href='{GSHEET_URL}'>–û—Ç–∫—Ä—ã—Ç—å —Ç–∞–±–ª–∏—Ü—É</a>",
        parse_mode=ParseMode.HTML
    )
    await callback.answer()
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ—Å–ª–µ –≤—ã–¥–∞—á–∏ —Å—Å—ã–ª–∫–∏
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu())

# ============ –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–ò–ó–ù–ï–°–ê ============

@router.callback_query(F.data == "business_stats")
async def business_stats_menu(callback: CallbackQuery, state: FSMContext):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="CopyPro1", callback_data="stats_cp1")],
        [InlineKeyboardButton(text="–î–æ–º–ë—ã—Ç–∞ –õ–ü58", callback_data="stats_lp58")],
        [InlineKeyboardButton(text="–î–æ–º–ë—ã—Ç–∞ –ü–∞–Ω—Ñ–∏–ª–æ–≤—Ü–∞–º", callback_data="stats_pan")],
        [InlineKeyboardButton(text="üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="return_to_main")]
    ])
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –±–∏–∑–Ω–µ—Å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", reply_markup=kb)
    await state.set_state(BusinessStatsStates.waiting_for_business)

@router.callback_query(BusinessStatsStates.waiting_for_business)
async def select_business_period(callback: CallbackQuery, state: FSMContext):
    if callback.data == "return_to_main":
        await state.clear()
        await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu())
        await callback.answer()
        return
    
    business_map = {
        "stats_cp1": "CopyPro1",
        "stats_lp58": "–î–æ–º–ë—ã—Ç–∞ –õ–µ–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç 58",
        "stats_pan": "–î–æ–º–ë—ã—Ç–∞ –ì–µ—Ä–æ—è–º –ü–∞–Ω—Ñ–∏–ª–æ–≤—Ü–∞–º 35"
    }
    
    business_name = business_map.get(callback.data)
    await state.update_data(business=business_name)
    
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìÖ –°–µ–≥–æ–¥–Ω—è", callback_data="bs_today")],
        [InlineKeyboardButton(text="üßÆ –ó–∞ –Ω–µ–¥–µ–ª—é", callback_data="bs_week")],
        [InlineKeyboardButton(text="üìà –ó–∞ –º–µ—Å—è—Ü", callback_data="bs_month")],
        [InlineKeyboardButton(text="üìö –ó–∞ –≥–æ–¥", callback_data="bs_year")],
        [InlineKeyboardButton(text="üìå –ü–æ –¥–∞—Ç–µ", callback_data="bs_by_date")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_business_menu")],
        [InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="return_to_main")]
    ])
    
    await callback.message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–∏–∑–Ω–µ—Å–∞ <b>{business_name}</b>:", 
                                 reply_markup=kb, 
                                 parse_mode=ParseMode.HTML)
    await state.set_state(BusinessStatsStates.waiting_for_period)

@router.callback_query(BusinessStatsStates.waiting_for_period)
async def handle_business_period(callback: CallbackQuery, state: FSMContext):
    if callback.data == "back_to_business_menu":
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="CopyPro1", callback_data="stats_cp1")],
            [InlineKeyboardButton(text="–î–æ–º–ë—ã—Ç–∞ –õ–ü58", callback_data="stats_lp58")],
            [InlineKeyboardButton(text="–î–æ–º–ë—ã—Ç–∞ –ü–∞–Ω—Ñ–∏–ª–æ–≤—Ü–∞–º", callback_data="stats_pan")],
            [InlineKeyboardButton(text="üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="return_to_main")]
        ])
        await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –±–∏–∑–Ω–µ—Å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", reply_markup=kb)
        await state.set_state(BusinessStatsStates.waiting_for_business)
        await callback.answer()
        return
    
    if callback.data == "return_to_main":
        await state.clear()
        await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu())
        await callback.answer()
        return
    
    data = await state.get_data()
    business = data.get("business")
    today = datetime.today()
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
    nav_kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìä –î—Ä—É–≥–æ–π –ø–µ—Ä–∏–æ–¥", callback_data="back_to_business_menu")],
        [InlineKeyboardButton(text="üìà –î—Ä—É–≥–æ–π –±–∏–∑–Ω–µ—Å", callback_data="business_stats")],
        [InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="return_to_main")]
    ])
    
    if callback.data == "bs_today":
        date = today.strftime("%d.%m.%Y")
        stats, income_data, expense_data = get_business_stats(business, "day", date)
        
        # –°–æ–∑–¥–∞–µ–º –≤—Å–µ –¥–∏–∞–≥—Ä–∞–º–º—ã
        pie_chart_buf = create_pie_chart(business, "–°–µ–≥–æ–¥–Ω—è", income_data, expense_data)
        bar_chart_buf = create_bar_chart(business, "–°–µ–≥–æ–¥–Ω—è", income_data, expense_data)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        await callback.message.answer(stats, reply_markup=nav_kb)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∏–∞–≥—Ä–∞–º–º—ã
        await callback.message.answer_photo(pie_chart_buf, caption=f"üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤ {business} –∑–∞ —Å–µ–≥–æ–¥–Ω—è")
        await callback.message.answer_photo(bar_chart_buf, caption=f"üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤ {business} –∑–∞ —Å–µ–≥–æ–¥–Ω—è", reply_markup=nav_kb)
        await callback.answer()
        return
    
    if callback.data == "bs_week":
        stats, income_data, expense_data = get_business_stats(business, "week")
        
        # –°–æ–∑–¥–∞–µ–º –≤—Å–µ –¥–∏–∞–≥—Ä–∞–º–º—ã
        pie_chart_buf = create_pie_chart(business, "–ó–∞ –Ω–µ–¥–µ–ª—é", income_data, expense_data)
        bar_chart_buf = create_bar_chart(business, "–ó–∞ –Ω–µ–¥–µ–ª—é", income_data, expense_data)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        await callback.message.answer(stats, reply_markup=nav_kb)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∏–∞–≥—Ä–∞–º–º—ã
        await callback.message.answer_photo(pie_chart_buf, caption=f"üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤ {business} –∑–∞ –Ω–µ–¥–µ–ª—é")
        await callback.message.answer_photo(bar_chart_buf, caption=f"üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤ {business} –∑–∞ –Ω–µ–¥–µ–ª—é", reply_markup=nav_kb)
        await callback.answer()
        return
    
    if callback.data == "bs_month":
        stats, income_data, expense_data = get_business_stats(business, "month")
        
        # –°–æ–∑–¥–∞–µ–º –≤—Å–µ –¥–∏–∞–≥—Ä–∞–º–º—ã
        pie_chart_buf = create_pie_chart(business, "–ó–∞ –º–µ—Å—è—Ü", income_data, expense_data)
        bar_chart_buf = create_bar_chart(business, "–ó–∞ –º–µ—Å—è—Ü", income_data, expense_data)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        await callback.message.answer(stats, reply_markup=nav_kb)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∏–∞–≥—Ä–∞–º–º—ã
        await callback.message.answer_photo(pie_chart_buf, caption=f"üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤ {business} –∑–∞ –º–µ—Å—è—Ü")
        await callback.message.answer_photo(bar_chart_buf, caption=f"üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤ {business} –∑–∞ –º–µ—Å—è—Ü", reply_markup=nav_kb)
        await callback.answer()
        return
    
    if callback.data == "bs_year":
        stats, income_data, expense_data = get_business_stats(business, "year")
        
        # –°–æ–∑–¥–∞–µ–º –≤—Å–µ –¥–∏–∞–≥—Ä–∞–º–º—ã
        pie_chart_buf = create_pie_chart(business, "–ó–∞ –≥–æ–¥", income_data, expense_data)
        bar_chart_buf = create_bar_chart(business, "–ó–∞ –≥–æ–¥", income_data, expense_data)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        await callback.message.answer(stats, reply_markup=nav_kb)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∏–∞–≥—Ä–∞–º–º—ã
        await callback.message.answer_photo(pie_chart_buf, caption=f"üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤ {business} –∑–∞ –≥–æ–¥")
        await callback.message.answer_photo(bar_chart_buf, caption=f"üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤ {business} –∑–∞ –≥–æ–¥", reply_markup=nav_kb)
        await callback.answer()
        return
    
    if callback.data == "bs_by_date":
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
        await state.set_state(BusinessStatsStates.waiting_for_date)
        await callback.answer()
        return
    
    await callback.message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥.", reply_markup=nav_kb)
    await callback.answer()

@router.message(BusinessStatsStates.waiting_for_date)
async def handle_business_custom_date(message: Message, state: FSMContext):
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
    nav_kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìä –î—Ä—É–≥–æ–π –ø–µ—Ä–∏–æ–¥", callback_data="back_to_business_menu")],
        [InlineKeyboardButton(text="üìà –î—Ä—É–≥–æ–π –±–∏–∑–Ω–µ—Å", callback_data="business_stats")],
        [InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="return_to_main")]
    ])
    
    try:
        date = message.text.strip()
        data = await state.get_data()
        business = data.get("business")
        
        stats, income_data, expense_data = get_business_stats(business, "day", date)
        
        # –°–æ–∑–¥–∞–µ–º –≤—Å–µ –¥–∏–∞–≥—Ä–∞–º–º—ã
        pie_chart_buf = create_pie_chart(business, f"–∑–∞ {date}", income_data, expense_data)
        bar_chart_buf = create_bar_chart(business, f"–∑–∞ {date}", income_data, expense_data)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        await message.answer(stats, reply_markup=nav_kb)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∏–∞–≥—Ä–∞–º–º—ã
        await message.answer_photo(pie_chart_buf, caption=f"üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤ {business} –∑–∞ {date}")
        await message.answer_photo(bar_chart_buf, caption=f"üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤ {business} –∑–∞ {date}", reply_markup=nav_kb)
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {e}", reply_markup=nav_kb)
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏—è –±—É–¥–µ—Ç —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏
    await state.clear()

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏–∞–≥—Ä–∞–º–º
def create_pie_chart(business: str, period: str, income_data: dict, expense_data: dict):
    """–°–æ–∑–¥–∞–µ—Ç –∫—Ä—É–≥–æ–≤—É—é –¥–∏–∞–≥—Ä–∞–º–º—É —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤"""
    # –°–æ–∑–¥–∞–µ–º –¥–≤–µ –∫—Ä—É–≥–æ–≤—ã–µ –¥–∏–∞–≥—Ä–∞–º–º—ã: –¥–ª—è –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤
    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 6))
    
    # –î–∏–∞–≥—Ä–∞–º–º–∞ –¥–æ—Ö–æ–¥–æ–≤
    if income_data:
        income_labels = list(income_data.keys())
        income_values = list(income_data.values())
        ax1.pie(income_values, labels=None, autopct='%1.1f%%', startangle=90)
        ax1.set_title('–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–æ—Ö–æ–¥–æ–≤')
        ax1.legend(income_labels, loc="center left", bbox_to_anchor=(0, -0.1))
    else:
        ax1.text(0.5, 0.5, '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –¥–æ—Ö–æ–¥–∞—Ö', horizontalalignment='center', verticalalignment='center')
        ax1.axis('off')
    
    # –î–∏–∞–≥—Ä–∞–º–º–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤
    if expense_data:
        expense_labels = list(expense_data.keys())
        expense_values = list(expense_data.values())
        ax2.pie(expense_values, labels=None, autopct='%1.1f%%', startangle=90)
        ax2.set_title('–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤')
        ax2.legend(expense_labels, loc="center right", bbox_to_anchor=(1, -0.1))
    else:
        ax2.text(0.5, 0.5, '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö', horizontalalignment='center', verticalalignment='center')
        ax2.axis('off')
    
    plt.suptitle(f'–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤ {business} {period}')
    plt.tight_layout()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    temp_file = tempfile.NamedTemporaryFile(delete=False, suffix='.png')
    plt.savefig(temp_file.name, format='png')
    plt.close(fig)
    
    return FSInputFile(temp_file.name)

def create_bar_chart(business: str, period: str, income_data: dict, expense_data: dict):
    """–°–æ–∑–¥–∞–µ—Ç —Å—Ç–æ–ª–±—á–∞—Ç—É—é –¥–∏–∞–≥—Ä–∞–º–º—É —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤"""
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
    categories = list(set(list(income_data.keys()) + list(expense_data.keys())))
    categories.sort()
    
    income_values = [income_data.get(cat, 0) for cat in categories]
    expense_values = [expense_data.get(cat, 0) for cat in categories]
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
    x = range(len(categories))
    width = 0.35
    
    fig, ax = plt.subplots(figsize=(12, 7))
    rects1 = ax.bar([i - width/2 for i in x], income_values, width, label='–î–æ—Ö–æ–¥—ã', color='green')
    rects2 = ax.bar([i + width/2 for i in x], expense_values, width, label='–†–∞—Å—Ö–æ–¥—ã', color='red')
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–µ–π –∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    ax.set_title(f'–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤ {business} {period}')
    ax.set_xticks(x)
    ax.set_xticklabels(categories, rotation=45, ha='right')
    ax.legend()
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –Ω–∞–¥ —Å—Ç–æ–ª–±—Ü–∞–º–∏
    def autolabel(rects):
        for rect in rects:
            height = rect.get_height()
            if height > 0:
                ax.annotate(f'{height:.0f}',
                            xy=(rect.get_x() + rect.get_width() / 2, height),
                            xytext=(0, 3),
                            textcoords="offset points",
                            ha='center', va='bottom')
    
    autolabel(rects1)
    autolabel(rects2)
    
    plt.tight_layout()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    temp_file = tempfile.NamedTemporaryFile(delete=False, suffix='.png')
    plt.savefig(temp_file.name, format='png')
    plt.close(fig)
    
    return FSInputFile(temp_file.name)

# ============ –î–û–•–û–î ============

@router.callback_query(F.data == "add_income")
async def income_start(callback: CallbackQuery, state: FSMContext):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–î–æ–º–ë—ã—Ç–∞ –õ–ü58", callback_data="project_lp58")],
        [InlineKeyboardButton(text="CopyPro1", callback_data="project_cp1")],
        [InlineKeyboardButton(text="–î–æ–º–ë—ã—Ç–∞ –ü–∞–Ω—Ñ–∏–ª–æ–≤—Ü–∞–º", callback_data="project_pan")],
        [InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="return_to_main")]
    ])
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç:", reply_markup=kb)
    await state.set_state(IncomeStates.waiting_for_project)
    await callback.answer()

@router.callback_query(IncomeStates.waiting_for_project)
async def income_project(callback: CallbackQuery, state: FSMContext):
    if callback.data == "return_to_main":
        await state.clear()
        await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu())
        await callback.answer()
        return
        
    projects = {
        "project_lp58": "–î–æ–º–ë—ã—Ç–∞ –õ–µ–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç 58",
        "project_cp1": "CopyPro1",
        "project_pan": "–î–æ–º–ë—ã—Ç–∞ –ì–µ—Ä–æ—è–º –ü–∞–Ω—Ñ–∏–ª–æ–≤—Ü–∞–º 35"
    }
    await state.update_data(
        project=projects.get(callback.data),
        date=datetime.today().strftime("%d.%m.%Y"),
        counterparty="–ù–∏–∫–∏—Ç–∞ –õ"
    )
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:")
    await state.set_state(IncomeStates.waiting_for_amount)
    await callback.answer()

@router.message(IncomeStates.waiting_for_amount)
async def income_amount(message: Message, state: FSMContext):
    await state.update_data(amount=message.text)
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–ª–∏–≥—Ä–∞—Ñ. –£—Å–ª—É–≥–∏", callback_data="cat_print")],
        [InlineKeyboardButton(text="–§–æ—Ç–æ –£—Å–ª—É–≥–∏", callback_data="cat_photo")],
        [InlineKeyboardButton(text="–ü–µ—á–∞—Ç–∏", callback_data="cat_stamp")],
        [InlineKeyboardButton(text="–ü—Ä–æ–¥–∞–∂–∞ –î–æ–ø–æ–≤", callback_data="cat_dops")],
        [InlineKeyboardButton(text="–ö–ª—é—á–∏", callback_data="cat_keys")],
        [InlineKeyboardButton(text="–û–¥–µ–∂–¥–∞", callback_data="cat_clothes")],
        [InlineKeyboardButton(text="–ß–∞—Å—ã", callback_data="cat_watches")],
        [InlineKeyboardButton(text="–û–±—É–≤—å", callback_data="cat_shoes")],
        [InlineKeyboardButton(text="–î—Ä—É–≥–æ–µ", callback_data="cat_other")],
        [InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="return_to_main")]
    ])
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—å—é –¥–æ—Ö–æ–¥–∞:", reply_markup=kb)
    await state.set_state(IncomeStates.waiting_for_category)

@router.callback_query(IncomeStates.waiting_for_category)
async def income_category(callback: CallbackQuery, state: FSMContext):
    if callback.data == "return_to_main":
        await state.clear()
        await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu())
        await callback.answer()
        return
        
    categories = {
        "cat_print": "–ü–æ–ª–∏–≥—Ä–∞—Ñ. –£—Å–ª—É–≥–∏",
        "cat_photo": "–§–æ—Ç–æ –£—Å–ª—É–≥–∏",
        "cat_stamp": "–ü–µ—á–∞—Ç–∏",
        "cat_dops": "–ü—Ä–æ–¥–∞–∂–∞ –î–æ–ø–æ–≤",
        "cat_keys": "–ö–ª—é—á–∏",
        "cat_clothes": "–û–¥–µ–∂–¥–∞",
        "cat_watches": "–ß–∞—Å—ã",
        "cat_shoes": "–û–±—É–≤—å",
        "cat_other": "–î—Ä—É–≥–æ–µ"
    }
    await state.update_data(category=categories.get(callback.data))
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ù–∞–ª–∏—á–∫–∞", callback_data="–ù–∞–ª–∏—á–∫–∞")],
        [InlineKeyboardButton(text="–ê–ª—å—Ñ–∞", callback_data="–ê–ª—å—Ñ–∞")],
        [InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∞ –ø–æ —Å—á—ë—Ç—É", callback_data="–û–ø–ª–∞—Ç–∞ –ø–æ —Å—á—ë—Ç—É")],
        [InlineKeyboardButton(text="–≠–∫–≤–∞–π—Ä–∏–Ω–≥", callback_data="–≠–∫–≤–∞–π—Ä–∏–Ω–≥")],
        [InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="return_to_main")]
    ])

    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å—á—ë—Ç:", reply_markup=kb)
    await state.set_state(IncomeStates.waiting_for_account)
    await callback.answer()

@router.callback_query(IncomeStates.waiting_for_account)
async def income_account(callback: CallbackQuery, state: FSMContext):
    if callback.data == "return_to_main":
        await state.clear()
        await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu())
        await callback.answer()
        return
        
    await state.update_data(account=callback.data)
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚Äî –ù–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è", callback_data="no_comment")],
        [InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="return_to_main")]
    ])
    await callback.message.answer("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–µ—Å–ª–∏ –µ—Å—Ç—å):", reply_markup=kb)
    await state.set_state(IncomeStates.waiting_for_comment)
    await callback.answer()

@router.callback_query(IncomeStates.waiting_for_comment, F.data == "no_comment")
async def income_no_comment(callback: CallbackQuery, state: FSMContext):
    await state.update_data(comment="-")
    await save_income(callback.message, state)
    await callback.answer()

@router.callback_query(IncomeStates.waiting_for_comment, F.data == "return_to_main")
async def income_return_to_main(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu())
    await callback.answer()

@router.message(IncomeStates.waiting_for_comment)
async def income_comment(message: Message, state: FSMContext):
    await state.update_data(comment=message.text)
    await save_income(message, state)

async def save_income(message: Message, state: FSMContext):
    data = await state.get_data()
    row = [
        data['date'],
        data['account'],
        data['amount'].replace(" ", "").replace(".", ","),
        data['category'],
        data['counterparty'],
        data['project'],
        data['comment'],
        "–¥–æ—Ö–æ–¥"
    ]
    try:
        append_transaction(row)
        result = "‚úÖ –î–æ—Ö–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω!"
    except Exception as e:
        result = f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏: {e}"

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –ï—â—ë –∑–∞–ø–∏—Å—å", callback_data="add_income")],
        [InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="return_to_main")]
    ])
    await message.answer(result, reply_markup=kb)
    await state.clear()

# ============ –†–ê–°–•–û–î ============

@router.callback_query(F.data == "add_expense")
async def expense_start(callback: CallbackQuery, state: FSMContext):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–î–æ–º–ë—ã—Ç–∞ –õ–ü58", callback_data="exp_lp58")],
        [InlineKeyboardButton(text="CopyPro1", callback_data="exp_cp1")],
        [InlineKeyboardButton(text="–î–æ–º–ë—ã—Ç–∞ –ü–∞–Ω—Ñ–∏–ª–æ–≤—Ü–∞–º", callback_data="exp_pan")],
        [InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="return_to_main")]
    ])
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç:", reply_markup=kb)
    await state.set_state(ExpenseStates.waiting_for_project)
    await callback.answer()

@router.callback_query(ExpenseStates.waiting_for_project)
async def expense_project(callback: CallbackQuery, state: FSMContext):
    if callback.data == "return_to_main":
        await state.clear()
        await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu())
        await callback.answer()
        return
        
    projects = {
        "exp_lp58": "–î–æ–º–ë—ã—Ç–∞ –õ–µ–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç 58",
        "exp_cp1": "CopyPro1",
        "exp_pan": "–î–æ–º–ë—ã—Ç–∞ –ì–µ—Ä–æ—è–º –ü–∞–Ω—Ñ–∏–ª–æ–≤—Ü–∞–º 35"
    }
    await state.update_data(
        project=projects.get(callback.data),
        date=datetime.today().strftime("%d.%m.%Y"),
        counterparty="–ù–∏–∫–∏—Ç–∞ –õ"
    )
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:")
    await state.set_state(ExpenseStates.waiting_for_amount)
    await callback.answer()

@router.message(ExpenseStates.waiting_for_amount)
async def expense_amount(message: Message, state: FSMContext):
    await state.update_data(amount=message.text)
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ó–∞—Ä–ø–ª–∞—Ç–∞", callback_data="ecat_salary")],
        [InlineKeyboardButton(text="–®–≤–µ—è", callback_data="ecat_tailor")],
        [InlineKeyboardButton(text="–ú–∞—Ç–µ—Ä–∏–∞–ª—ã/—Ä–∞—Å—Ö–æ–¥–Ω–∏–∫–∏/–∫–ª—é—á–∏", callback_data="ecat_materials")],
        [InlineKeyboardButton(text="–î—Ä—É–≥–æ–µ", callback_data="ecat_other")],
        [InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="return_to_main")]
    ])
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—å—é —Ä–∞—Å—Ö–æ–¥–∞:", reply_markup=kb)
    await state.set_state(ExpenseStates.waiting_for_category)

@router.callback_query(ExpenseStates.waiting_for_category)
async def expense_category(callback: CallbackQuery, state: FSMContext):
    if callback.data == "return_to_main":
        await state.clear()
        await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu())
        await callback.answer()
        return
        
    categories = {
        "ecat_salary": "–ó–∞—Ä–ø–ª–∞—Ç–∞",
        "ecat_tailor": "–®–≤–µ—è",
        "ecat_materials": "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã/—Ä–∞—Å—Ö–æ–¥–Ω–∏–∫–∏/–∫–ª—é—á–∏",
        "ecat_other": "–î—Ä—É–≥–æ–µ"
    }
    await state.update_data(category=categories.get(callback.data))

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ù–∏–∫–∏—Ç–∞ –õ", callback_data="ctr_nikita")],
        [InlineKeyboardButton(text="–ö–æ—Å—Ç—è", callback_data="ctr_kostya")],
        [InlineKeyboardButton(text="–®–≤–µ—è", callback_data="ctr_shveya")],
        [InlineKeyboardButton(text="–ö—Å–µ–Ω–∏—è", callback_data="ctr_ksenia")],
        [InlineKeyboardButton(text="–ê–ª–µ–∫—Å–∞–Ω–¥—Ä", callback_data="ctr_alex")],
        [InlineKeyboardButton(text="–ë—É—Ö–≥–∞–ª—Ç–µ—Ä", callback_data="ctr_buh")],
        [InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="return_to_main")]
    ])
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞:", reply_markup=kb)
    await state.set_state(ExpenseStates.waiting_for_counterparty)
    await callback.answer()

@router.callback_query(ExpenseStates.waiting_for_counterparty)
async def expense_counterparty(callback: CallbackQuery, state: FSMContext):
    if callback.data == "return_to_main":
        await state.clear()
        await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu())
        await callback.answer()
        return
        
    counterparty_map = {
        "ctr_nikita": "–ù–∏–∫–∏—Ç–∞ –õ",
        "ctr_kostya": "–ö–æ—Å—Ç—è",
        "ctr_shveya": "–®–≤–µ—è",
        "ctr_ksenia": "–ö—Å–µ–Ω–∏—è",
        "ctr_alex": "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä",
        "ctr_buh": "–ë—É—Ö–≥–∞–ª—Ç–µ—Ä"
    }
    await state.update_data(counterparty=counterparty_map.get(callback.data))

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ù–∞–ª–∏—á–∫–∞", callback_data="–ù–∞–ª–∏—á–∫–∞")],
        [InlineKeyboardButton(text="–ê–ª—å—Ñ–∞", callback_data="–ê–ª—å—Ñ–∞")],
        [InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∞ –ø–æ —Å—á—ë—Ç—É", callback_data="–û–ø–ª–∞—Ç–∞ –ø–æ —Å—á—ë—Ç—É")],
        [InlineKeyboardButton(text="–≠–∫–≤–∞–π—Ä–∏–Ω–≥", callback_data="–≠–∫–≤–∞–π—Ä–∏–Ω–≥")],
        [InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="return_to_main")]
    ])
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å—á—ë—Ç:", reply_markup=kb)
    await state.set_state(ExpenseStates.waiting_for_account)
    await callback.answer()


@router.callback_query(ExpenseStates.waiting_for_account)
async def expense_account(callback: CallbackQuery, state: FSMContext):
    if callback.data == "return_to_main":
        await state.clear()
        await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu())
        await callback.answer()
        return
        
    await state.update_data(account=callback.data)
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚Äî –ù–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è", callback_data="eno_comment")],
        [InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="return_to_main")]
    ])
    await callback.message.answer("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–µ—Å–ª–∏ –µ—Å—Ç—å):", reply_markup=kb)
    await state.set_state(ExpenseStates.waiting_for_comment)
    await callback.answer()

@router.callback_query(ExpenseStates.waiting_for_comment, F.data == "eno_comment")
async def expense_no_comment(callback: CallbackQuery, state: FSMContext):
    await state.update_data(comment="-")
    await save_expense(callback.message, state)
    await callback.answer()

@router.callback_query(ExpenseStates.waiting_for_comment, F.data == "return_to_main")
async def expense_return_to_main(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu())
    await callback.answer()

@router.message(ExpenseStates.waiting_for_comment)
async def expense_comment(message: Message, state: FSMContext):
    await state.update_data(comment=message.text)
    await save_expense(message, state)

async def save_expense(message: Message, state: FSMContext):
    data = await state.get_data()
    row = [
        data['date'],
        data['account'],
        data['amount'].replace(" ", "").replace(".", ","),
        data['category'],
        data['counterparty'],
        data['project'],
        data['comment'],
        "—Ä–∞—Å—Ö–æ–¥"
    ]
    try:
        append_transaction(row)
        result = "‚úÖ –†–∞—Å—Ö–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω!"
    except Exception as e:
        result = f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏: {e}"

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –ï—â—ë –∑–∞–ø–∏—Å—å", callback_data="add_expense")],
        [InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="return_to_main")]
    ])
    await message.answer(result, reply_markup=kb)
    await state.clear()

# ============ –ü–û–í–¢–û–† / –ú–ï–ù–Æ ============

@router.callback_query(F.data == "start_over")
async def start_over(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu())
    await callback.answer()

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@router.callback_query(F.data == "return_to_main")
async def return_to_main(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu())
    await callback.answer()

@router.callback_query(F.data == "report")
async def report_menu(callback: CallbackQuery):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìÖ –°–µ–≥–æ–¥–Ω—è", callback_data="r_today")],
        [InlineKeyboardButton(text="üßÆ –ó–∞ –Ω–µ–¥–µ–ª—é", callback_data="r_week")],
        [InlineKeyboardButton(text="üìà –ó–∞ –º–µ—Å—è—Ü", callback_data="r_month")],
        [InlineKeyboardButton(text="üìö –ó–∞ –≥–æ–¥", callback_data="r_year")],
        [InlineKeyboardButton(text="üìå –ü–æ –¥–∞—Ç–µ", callback_data="r_by_date")],
        [InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="return_to_main")]
    ])
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –æ—Ç—á—ë—Ç–∞:", reply_markup=kb)
    await callback.answer()
    

@router.callback_query(F.data.startswith("r_"))
async def handle_report_period(callback: CallbackQuery, state: FSMContext):
    data = callback.data
    today = datetime.today()

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìä –î—Ä—É–≥–æ–π –æ—Ç—á—ë—Ç", callback_data="report")],
        [InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="return_to_main")]
    ])

    if data == "r_today":
        date = today.strftime("%d.%m.%Y")
        report = get_report_for_date(date)
        await callback.message.answer(report, reply_markup=kb)
        await callback.answer()
        return

    if data == "r_yesterday":
        date = (today - timedelta(days=1)).strftime("%d.%m.%Y")
        report = get_report_for_date(date)
        await callback.message.answer(report, reply_markup=kb)
        await callback.answer()
        return

    if data == "r_week":
        report = get_summary_period("–ó–∞ –Ω–µ–¥–µ–ª—é")
        await callback.message.answer(report, reply_markup=kb)
        await callback.answer()
        return

    if data == "r_month":
        report = get_summary_period("–ó–∞ –º–µ—Å—è—Ü")
        await callback.message.answer(report, reply_markup=kb)
        await callback.answer()
        return

    if data == "r_year":
        report = get_summary_period("–ó–∞ –≥–æ–¥")
        await callback.message.answer(report, reply_markup=kb)
        await callback.answer()
        return

    if data == "r_by_date":
        kb_cancel = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üè† –û—Ç–º–µ–Ω–∞ –∏ –≤–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é", callback_data="return_to_main")]
        ])
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:", reply_markup=kb_cancel)
        await state.set_state(ReportStates.waiting_for_date)
        await callback.answer()
        return

    await callback.message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥.", reply_markup=kb)
    await callback.answer()

@router.message(ReportStates.waiting_for_date)
async def handle_custom_date(message: Message, state: FSMContext):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìä –î—Ä—É–≥–æ–π –æ—Ç—á—ë—Ç", callback_data="report")],
        [InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="return_to_main")]
    ])
    
    try:
        date = message.text.strip()
        from gsheets import get_report_for_date
        result = get_report_for_date(date)
        await message.answer(result, reply_markup=kb)
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {e}", reply_markup=kb)
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ª—é–±—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@router.message()
async def catch_all(message: Message, state: FSMContext):
    current = await state.get_state()
    if current:
        await state.clear()
        await message.answer("‚ö†Ô∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–π –≤–≤–æ–¥ —Å–±—Ä–æ—à–µ–Ω.")
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())

# ============ –ó–ê–ü–£–°–ö ============

async def main():
    bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    dp = Dispatcher(storage=MemoryStorage())
    dp.include_router(router)
    await dp.start_polling(bot)

if __name__ == "__main__":
    if sys.platform.startswith('win'):
        asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())
    asyncio.run(main())
